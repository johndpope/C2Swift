// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/prof_dag.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe2/proto/prof_dag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* ProfDAGProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfDAGProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfDAGProtos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfDAGProtos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe2_2fproto_2fprof_5fdag_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_caffe2_2fproto_2fprof_5fdag_2eproto() {
  protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe2/proto/prof_dag.proto");
  GOOGLE_CHECK(file != NULL);
  ProfDAGProto_descriptor_ = file->message_type(0);
  static const int ProfDAGProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, stddev_),
  };
  ProfDAGProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProfDAGProto_descriptor_,
      ProfDAGProto::internal_default_instance(),
      ProfDAGProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, _has_bits_),
      -1,
      -1,
      sizeof(ProfDAGProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, _internal_metadata_));
  ProfDAGProtos_descriptor_ = file->message_type(1);
  static const int ProfDAGProtos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, stats_),
  };
  ProfDAGProtos_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ProfDAGProtos_descriptor_,
      ProfDAGProtos::internal_default_instance(),
      ProfDAGProtos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, _has_bits_),
      -1,
      -1,
      sizeof(ProfDAGProtos),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe2_2fproto_2fprof_5fdag_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProfDAGProto_descriptor_, ProfDAGProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ProfDAGProtos_descriptor_, ProfDAGProtos::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe2_2fproto_2fprof_5fdag_2eproto() {
  ProfDAGProto_default_instance_.Shutdown();
  delete ProfDAGProto_reflection_;
  ProfDAGProtos_default_instance_.Shutdown();
  delete ProfDAGProtos_reflection_;
}

void protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  ProfDAGProto_default_instance_.DefaultConstruct();
  ProfDAGProtos_default_instance_.DefaultConstruct();
  ProfDAGProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  ProfDAGProtos_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto_once_);
void protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto_once_,
                 &protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto_impl);
}
void protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033caffe2/proto/prof_dag.proto\022\006caffe2\":\n"
    "\014ProfDAGProto\022\014\n\004name\030\001 \002(\t\022\014\n\004mean\030\002 \002("
    "\002\022\016\n\006stddev\030\003 \002(\002\"4\n\rProfDAGProtos\022#\n\005st"
    "ats\030\001 \003(\0132\024.caffe2.ProfDAGProto", 151);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe2/proto/prof_dag.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe2_2fproto_2fprof_5fdag_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto_once_);
void protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto_once_,
                 &protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe2_2fproto_2fprof_5fdag_2eproto {
  StaticDescriptorInitializer_caffe2_2fproto_2fprof_5fdag_2eproto() {
    protobuf_AddDesc_caffe2_2fproto_2fprof_5fdag_2eproto();
  }
} static_descriptor_initializer_caffe2_2fproto_2fprof_5fdag_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfDAGProto::kNameFieldNumber;
const int ProfDAGProto::kMeanFieldNumber;
const int ProfDAGProto::kStddevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfDAGProto::ProfDAGProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ProfDAGProto)
}

void ProfDAGProto::InitAsDefaultInstance() {
}

ProfDAGProto::ProfDAGProto(const ProfDAGProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.ProfDAGProto)
}

void ProfDAGProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&mean_, 0, reinterpret_cast<char*>(&stddev_) -
    reinterpret_cast<char*>(&mean_) + sizeof(stddev_));
}

ProfDAGProto::~ProfDAGProto() {
  // @@protoc_insertion_point(destructor:caffe2.ProfDAGProto)
  SharedDtor();
}

void ProfDAGProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ProfDAGProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfDAGProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfDAGProto_descriptor_;
}

const ProfDAGProto& ProfDAGProto::default_instance() {
  protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProfDAGProto> ProfDAGProto_default_instance_;

ProfDAGProto* ProfDAGProto::New(::google::protobuf::Arena* arena) const {
  ProfDAGProto* n = new ProfDAGProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfDAGProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ProfDAGProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ProfDAGProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ProfDAGProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 7u) {
    ZR_(mean_, stddev_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProfDAGProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ProfDAGProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.ProfDAGProto.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_mean;
        break;
      }

      // required float mean = 2;
      case 2: {
        if (tag == 21) {
         parse_mean:
          set_has_mean();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_stddev;
        break;
      }

      // required float stddev = 3;
      case 3: {
        if (tag == 29) {
         parse_stddev:
          set_has_stddev();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ProfDAGProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ProfDAGProto)
  return false;
#undef DO_
}

void ProfDAGProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ProfDAGProto)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required float mean = 2;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  // required float stddev = 3;
  if (has_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stddev(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ProfDAGProto)
}

::google::protobuf::uint8* ProfDAGProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ProfDAGProto)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.ProfDAGProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required float mean = 2;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  // required float stddev = 3;
  if (has_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stddev(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ProfDAGProto)
  return target;
}

size_t ProfDAGProto::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:caffe2.ProfDAGProto)
  size_t total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_mean()) {
    // required float mean = 2;
    total_size += 1 + 4;
  }

  if (has_stddev()) {
    // required float stddev = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ProfDAGProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ProfDAGProto)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required float mean = 2;
    total_size += 1 + 4;

    // required float stddev = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfDAGProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ProfDAGProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProfDAGProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfDAGProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ProfDAGProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ProfDAGProto)
    UnsafeMergeFrom(*source);
  }
}

void ProfDAGProto::MergeFrom(const ProfDAGProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ProfDAGProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProfDAGProto::UnsafeMergeFrom(const ProfDAGProto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_stddev()) {
      set_stddev(from.stddev());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ProfDAGProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ProfDAGProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProto::CopyFrom(const ProfDAGProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ProfDAGProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProfDAGProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProfDAGProto::Swap(ProfDAGProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfDAGProto::InternalSwap(ProfDAGProto* other) {
  name_.Swap(&other->name_);
  std::swap(mean_, other->mean_);
  std::swap(stddev_, other->stddev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfDAGProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfDAGProto_descriptor_;
  metadata.reflection = ProfDAGProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfDAGProto

// required string name = 1;
bool ProfDAGProto::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ProfDAGProto::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void ProfDAGProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void ProfDAGProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& ProfDAGProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfDAGProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.name)
}
void ProfDAGProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.ProfDAGProto.name)
}
void ProfDAGProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.ProfDAGProto.name)
}
::std::string* ProfDAGProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ProfDAGProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.ProfDAGProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ProfDAGProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.ProfDAGProto.name)
}

// required float mean = 2;
bool ProfDAGProto::has_mean() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ProfDAGProto::set_has_mean() {
  _has_bits_[0] |= 0x00000002u;
}
void ProfDAGProto::clear_has_mean() {
  _has_bits_[0] &= ~0x00000002u;
}
void ProfDAGProto::clear_mean() {
  mean_ = 0;
  clear_has_mean();
}
float ProfDAGProto::mean() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.mean)
  return mean_;
}
void ProfDAGProto::set_mean(float value) {
  set_has_mean();
  mean_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.mean)
}

// required float stddev = 3;
bool ProfDAGProto::has_stddev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ProfDAGProto::set_has_stddev() {
  _has_bits_[0] |= 0x00000004u;
}
void ProfDAGProto::clear_has_stddev() {
  _has_bits_[0] &= ~0x00000004u;
}
void ProfDAGProto::clear_stddev() {
  stddev_ = 0;
  clear_has_stddev();
}
float ProfDAGProto::stddev() const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProto.stddev)
  return stddev_;
}
void ProfDAGProto::set_stddev(float value) {
  set_has_stddev();
  stddev_ = value;
  // @@protoc_insertion_point(field_set:caffe2.ProfDAGProto.stddev)
}

inline const ProfDAGProto* ProfDAGProto::internal_default_instance() {
  return &ProfDAGProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ProfDAGProtos::kStatsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ProfDAGProtos::ProfDAGProtos()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.ProfDAGProtos)
}

void ProfDAGProtos::InitAsDefaultInstance() {
}

ProfDAGProtos::ProfDAGProtos(const ProfDAGProtos& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.ProfDAGProtos)
}

void ProfDAGProtos::SharedCtor() {
  _cached_size_ = 0;
}

ProfDAGProtos::~ProfDAGProtos() {
  // @@protoc_insertion_point(destructor:caffe2.ProfDAGProtos)
  SharedDtor();
}

void ProfDAGProtos::SharedDtor() {
}

void ProfDAGProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfDAGProtos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfDAGProtos_descriptor_;
}

const ProfDAGProtos& ProfDAGProtos::default_instance() {
  protobuf_InitDefaults_caffe2_2fproto_2fprof_5fdag_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<ProfDAGProtos> ProfDAGProtos_default_instance_;

ProfDAGProtos* ProfDAGProtos::New(::google::protobuf::Arena* arena) const {
  ProfDAGProtos* n = new ProfDAGProtos;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ProfDAGProtos::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.ProfDAGProtos)
  stats_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ProfDAGProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.ProfDAGProtos)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.ProfDAGProto stats = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stats()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_stats;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.ProfDAGProtos)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.ProfDAGProtos)
  return false;
#undef DO_
}

void ProfDAGProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.ProfDAGProtos)
  // repeated .caffe2.ProfDAGProto stats = 1;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.ProfDAGProtos)
}

::google::protobuf::uint8* ProfDAGProtos::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.ProfDAGProtos)
  // repeated .caffe2.ProfDAGProto stats = 1;
  for (unsigned int i = 0, n = this->stats_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stats(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.ProfDAGProtos)
  return target;
}

size_t ProfDAGProtos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.ProfDAGProtos)
  size_t total_size = 0;

  // repeated .caffe2.ProfDAGProto stats = 1;
  {
    unsigned int count = this->stats_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stats(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfDAGProtos::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.ProfDAGProtos)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ProfDAGProtos* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ProfDAGProtos>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.ProfDAGProtos)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.ProfDAGProtos)
    UnsafeMergeFrom(*source);
  }
}

void ProfDAGProtos::MergeFrom(const ProfDAGProtos& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.ProfDAGProtos)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void ProfDAGProtos::UnsafeMergeFrom(const ProfDAGProtos& from) {
  GOOGLE_DCHECK(&from != this);
  stats_.MergeFrom(from.stats_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void ProfDAGProtos::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.ProfDAGProtos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProtos::CopyFrom(const ProfDAGProtos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.ProfDAGProtos)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool ProfDAGProtos::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->stats())) return false;
  return true;
}

void ProfDAGProtos::Swap(ProfDAGProtos* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ProfDAGProtos::InternalSwap(ProfDAGProtos* other) {
  stats_.UnsafeArenaSwap(&other->stats_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ProfDAGProtos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfDAGProtos_descriptor_;
  metadata.reflection = ProfDAGProtos_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ProfDAGProtos

// repeated .caffe2.ProfDAGProto stats = 1;
int ProfDAGProtos::stats_size() const {
  return stats_.size();
}
void ProfDAGProtos::clear_stats() {
  stats_.Clear();
}
const ::caffe2::ProfDAGProto& ProfDAGProtos::stats(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.ProfDAGProtos.stats)
  return stats_.Get(index);
}
::caffe2::ProfDAGProto* ProfDAGProtos::mutable_stats(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.ProfDAGProtos.stats)
  return stats_.Mutable(index);
}
::caffe2::ProfDAGProto* ProfDAGProtos::add_stats() {
  // @@protoc_insertion_point(field_add:caffe2.ProfDAGProtos.stats)
  return stats_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >*
ProfDAGProtos::mutable_stats() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.ProfDAGProtos.stats)
  return &stats_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::ProfDAGProto >&
ProfDAGProtos::stats() const {
  // @@protoc_insertion_point(field_list:caffe2.ProfDAGProtos.stats)
  return stats_;
}

inline const ProfDAGProtos* ProfDAGProtos::internal_default_instance() {
  return &ProfDAGProtos_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
