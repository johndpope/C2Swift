// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/predictor_consts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe2/proto/predictor_consts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* PredictorConsts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredictorConsts_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto() {
  protobuf_AddDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe2/proto/predictor_consts.proto");
  GOOGLE_CHECK(file != NULL);
  PredictorConsts_descriptor_ = file->message_type(0);
  static const int PredictorConsts_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, meta_net_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, predictor_dbreader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, parameters_blob_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, inputs_blob_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, outputs_blob_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, global_init_net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, predict_init_net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, predict_net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, single_predictor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, multi_predictor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, train_init_plan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, train_plan_type_),
  };
  PredictorConsts_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PredictorConsts_descriptor_,
      PredictorConsts::internal_default_instance(),
      PredictorConsts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, _has_bits_),
      -1,
      -1,
      sizeof(PredictorConsts),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PredictorConsts_descriptor_, PredictorConsts::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe2_2fproto_2fpredictor_5fconsts_2eproto() {
  PredictorConsts_default_instance_.Shutdown();
  delete PredictorConsts_reflection_;
  delete PredictorConsts::_default_meta_net_def_;
  delete PredictorConsts::_default_predictor_dbreader_;
  delete PredictorConsts::_default_parameters_blob_type_;
  delete PredictorConsts::_default_inputs_blob_type_;
  delete PredictorConsts::_default_outputs_blob_type_;
  delete PredictorConsts::_default_global_init_net_type_;
  delete PredictorConsts::_default_predict_init_net_type_;
  delete PredictorConsts::_default_predict_net_type_;
  delete PredictorConsts::_default_single_predictor_;
  delete PredictorConsts::_default_multi_predictor_;
  delete PredictorConsts::_default_train_init_plan_type_;
  delete PredictorConsts::_default_train_plan_type_;
}

void protobuf_InitDefaults_caffe2_2fproto_2fpredictor_5fconsts_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  PredictorConsts::_default_meta_net_def_ =
      new ::std::string("!!META_NET_DEF", 14);
  PredictorConsts::_default_predictor_dbreader_ =
      new ::std::string("!!PREDICTOR_DBREADER", 20);
  PredictorConsts::_default_parameters_blob_type_ =
      new ::std::string("PARAMETERS_BLOB_TYPE", 20);
  PredictorConsts::_default_inputs_blob_type_ =
      new ::std::string("INPUTS_BLOB_TYPE", 16);
  PredictorConsts::_default_outputs_blob_type_ =
      new ::std::string("OUTPUTS_BLOB_TYPE", 17);
  PredictorConsts::_default_global_init_net_type_ =
      new ::std::string("GLOBAL_INIT_NET_TYPE", 20);
  PredictorConsts::_default_predict_init_net_type_ =
      new ::std::string("PREDICT_INIT_NET_TYPE", 21);
  PredictorConsts::_default_predict_net_type_ =
      new ::std::string("PREDICT_NET_TYPE", 16);
  PredictorConsts::_default_single_predictor_ =
      new ::std::string("SINGLE_PREDICTOR", 16);
  PredictorConsts::_default_multi_predictor_ =
      new ::std::string("MULTI_PREDICTOR", 15);
  PredictorConsts::_default_train_init_plan_type_ =
      new ::std::string("TRAIN_INIT_PLAN_TYPE", 20);
  PredictorConsts::_default_train_plan_type_ =
      new ::std::string("TRAIN_PLAN_TYPE", 15);
  PredictorConsts_default_instance_.DefaultConstruct();
  PredictorConsts_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_caffe2_2fproto_2fpredictor_5fconsts_2eproto_once_);
void protobuf_InitDefaults_caffe2_2fproto_2fpredictor_5fconsts_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_caffe2_2fproto_2fpredictor_5fconsts_2eproto_once_,
                 &protobuf_InitDefaults_caffe2_2fproto_2fpredictor_5fconsts_2eproto_impl);
}
void protobuf_AddDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_caffe2_2fproto_2fpredictor_5fconsts_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#caffe2/proto/predictor_consts.proto\022\006c"
    "affe2\"\301\004\n\017PredictorConsts\022$\n\014META_NET_DE"
    "F\030\001 \001(\t:\016!!META_NET_DEF\0220\n\022PREDICTOR_DBR"
    "EADER\030\002 \001(\t:\024!!PREDICTOR_DBREADER\0222\n\024PAR"
    "AMETERS_BLOB_TYPE\030\003 \001(\t:\024PARAMETERS_BLOB"
    "_TYPE\022*\n\020INPUTS_BLOB_TYPE\030\004 \001(\t:\020INPUTS_"
    "BLOB_TYPE\022,\n\021OUTPUTS_BLOB_TYPE\030\005 \001(\t:\021OU"
    "TPUTS_BLOB_TYPE\0222\n\024GLOBAL_INIT_NET_TYPE\030"
    "\006 \001(\t:\024GLOBAL_INIT_NET_TYPE\0224\n\025PREDICT_I"
    "NIT_NET_TYPE\030\007 \001(\t:\025PREDICT_INIT_NET_TYP"
    "E\022*\n\020PREDICT_NET_TYPE\030\010 \001(\t:\020PREDICT_NET"
    "_TYPE\022*\n\020SINGLE_PREDICTOR\030\t \001(\t:\020SINGLE_"
    "PREDICTOR\022(\n\017MULTI_PREDICTOR\030\n \001(\t:\017MULT"
    "I_PREDICTOR\0222\n\024TRAIN_INIT_PLAN_TYPE\030\013 \001("
    "\t:\024TRAIN_INIT_PLAN_TYPE\022(\n\017TRAIN_PLAN_TY"
    "PE\030\014 \001(\t:\017TRAIN_PLAN_TYPE", 625);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe2/proto/predictor_consts.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe2_2fproto_2fpredictor_5fconsts_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto_once_);
void protobuf_AddDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto_once_,
                 &protobuf_AddDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe2_2fproto_2fpredictor_5fconsts_2eproto {
  StaticDescriptorInitializer_caffe2_2fproto_2fpredictor_5fconsts_2eproto() {
    protobuf_AddDesc_caffe2_2fproto_2fpredictor_5fconsts_2eproto();
  }
} static_descriptor_initializer_caffe2_2fproto_2fpredictor_5fconsts_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

::std::string* PredictorConsts::_default_meta_net_def_ = NULL;
::std::string* PredictorConsts::_default_predictor_dbreader_ = NULL;
::std::string* PredictorConsts::_default_parameters_blob_type_ = NULL;
::std::string* PredictorConsts::_default_inputs_blob_type_ = NULL;
::std::string* PredictorConsts::_default_outputs_blob_type_ = NULL;
::std::string* PredictorConsts::_default_global_init_net_type_ = NULL;
::std::string* PredictorConsts::_default_predict_init_net_type_ = NULL;
::std::string* PredictorConsts::_default_predict_net_type_ = NULL;
::std::string* PredictorConsts::_default_single_predictor_ = NULL;
::std::string* PredictorConsts::_default_multi_predictor_ = NULL;
::std::string* PredictorConsts::_default_train_init_plan_type_ = NULL;
::std::string* PredictorConsts::_default_train_plan_type_ = NULL;
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PredictorConsts::kMETANETDEFFieldNumber;
const int PredictorConsts::kPREDICTORDBREADERFieldNumber;
const int PredictorConsts::kPARAMETERSBLOBTYPEFieldNumber;
const int PredictorConsts::kINPUTSBLOBTYPEFieldNumber;
const int PredictorConsts::kOUTPUTSBLOBTYPEFieldNumber;
const int PredictorConsts::kGLOBALINITNETTYPEFieldNumber;
const int PredictorConsts::kPREDICTINITNETTYPEFieldNumber;
const int PredictorConsts::kPREDICTNETTYPEFieldNumber;
const int PredictorConsts::kSINGLEPREDICTORFieldNumber;
const int PredictorConsts::kMULTIPREDICTORFieldNumber;
const int PredictorConsts::kTRAININITPLANTYPEFieldNumber;
const int PredictorConsts::kTRAINPLANTYPEFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PredictorConsts::PredictorConsts()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe2_2fproto_2fpredictor_5fconsts_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PredictorConsts)
}

void PredictorConsts::InitAsDefaultInstance() {
}

PredictorConsts::PredictorConsts(const PredictorConsts& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.PredictorConsts)
}

void PredictorConsts::SharedCtor() {
  _cached_size_ = 0;
  meta_net_def_.UnsafeSetDefault(_default_meta_net_def_);
  predictor_dbreader_.UnsafeSetDefault(_default_predictor_dbreader_);
  parameters_blob_type_.UnsafeSetDefault(_default_parameters_blob_type_);
  inputs_blob_type_.UnsafeSetDefault(_default_inputs_blob_type_);
  outputs_blob_type_.UnsafeSetDefault(_default_outputs_blob_type_);
  global_init_net_type_.UnsafeSetDefault(_default_global_init_net_type_);
  predict_init_net_type_.UnsafeSetDefault(_default_predict_init_net_type_);
  predict_net_type_.UnsafeSetDefault(_default_predict_net_type_);
  single_predictor_.UnsafeSetDefault(_default_single_predictor_);
  multi_predictor_.UnsafeSetDefault(_default_multi_predictor_);
  train_init_plan_type_.UnsafeSetDefault(_default_train_init_plan_type_);
  train_plan_type_.UnsafeSetDefault(_default_train_plan_type_);
}

PredictorConsts::~PredictorConsts() {
  // @@protoc_insertion_point(destructor:caffe2.PredictorConsts)
  SharedDtor();
}

void PredictorConsts::SharedDtor() {
  meta_net_def_.DestroyNoArena(_default_meta_net_def_);
  predictor_dbreader_.DestroyNoArena(_default_predictor_dbreader_);
  parameters_blob_type_.DestroyNoArena(_default_parameters_blob_type_);
  inputs_blob_type_.DestroyNoArena(_default_inputs_blob_type_);
  outputs_blob_type_.DestroyNoArena(_default_outputs_blob_type_);
  global_init_net_type_.DestroyNoArena(_default_global_init_net_type_);
  predict_init_net_type_.DestroyNoArena(_default_predict_init_net_type_);
  predict_net_type_.DestroyNoArena(_default_predict_net_type_);
  single_predictor_.DestroyNoArena(_default_single_predictor_);
  multi_predictor_.DestroyNoArena(_default_multi_predictor_);
  train_init_plan_type_.DestroyNoArena(_default_train_init_plan_type_);
  train_plan_type_.DestroyNoArena(_default_train_plan_type_);
}

void PredictorConsts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictorConsts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredictorConsts_descriptor_;
}

const PredictorConsts& PredictorConsts::default_instance() {
  protobuf_InitDefaults_caffe2_2fproto_2fpredictor_5fconsts_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PredictorConsts> PredictorConsts_default_instance_;

PredictorConsts* PredictorConsts::New(::google::protobuf::Arena* arena) const {
  PredictorConsts* n = new PredictorConsts;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PredictorConsts::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.PredictorConsts)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_meta_net_def()) {
      meta_net_def_.ClearToDefaultNoArena(_default_meta_net_def_);
    }
    if (has_predictor_dbreader()) {
      predictor_dbreader_.ClearToDefaultNoArena(_default_predictor_dbreader_);
    }
    if (has_parameters_blob_type()) {
      parameters_blob_type_.ClearToDefaultNoArena(_default_parameters_blob_type_);
    }
    if (has_inputs_blob_type()) {
      inputs_blob_type_.ClearToDefaultNoArena(_default_inputs_blob_type_);
    }
    if (has_outputs_blob_type()) {
      outputs_blob_type_.ClearToDefaultNoArena(_default_outputs_blob_type_);
    }
    if (has_global_init_net_type()) {
      global_init_net_type_.ClearToDefaultNoArena(_default_global_init_net_type_);
    }
    if (has_predict_init_net_type()) {
      predict_init_net_type_.ClearToDefaultNoArena(_default_predict_init_net_type_);
    }
    if (has_predict_net_type()) {
      predict_net_type_.ClearToDefaultNoArena(_default_predict_net_type_);
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_single_predictor()) {
      single_predictor_.ClearToDefaultNoArena(_default_single_predictor_);
    }
    if (has_multi_predictor()) {
      multi_predictor_.ClearToDefaultNoArena(_default_multi_predictor_);
    }
    if (has_train_init_plan_type()) {
      train_init_plan_type_.ClearToDefaultNoArena(_default_train_init_plan_type_);
    }
    if (has_train_plan_type()) {
      train_plan_type_.ClearToDefaultNoArena(_default_train_plan_type_);
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PredictorConsts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PredictorConsts)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta_net_def()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->meta_net_def().data(), this->meta_net_def().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.META_NET_DEF");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_PREDICTOR_DBREADER;
        break;
      }

      // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
      case 2: {
        if (tag == 18) {
         parse_PREDICTOR_DBREADER:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predictor_dbreader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predictor_dbreader().data(), this->predictor_dbreader().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PREDICTOR_DBREADER");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_PARAMETERS_BLOB_TYPE;
        break;
      }

      // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
      case 3: {
        if (tag == 26) {
         parse_PARAMETERS_BLOB_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameters_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parameters_blob_type().data(), this->parameters_blob_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_INPUTS_BLOB_TYPE;
        break;
      }

      // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
      case 4: {
        if (tag == 34) {
         parse_INPUTS_BLOB_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputs_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->inputs_blob_type().data(), this->inputs_blob_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_OUTPUTS_BLOB_TYPE;
        break;
      }

      // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
      case 5: {
        if (tag == 42) {
         parse_OUTPUTS_BLOB_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outputs_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->outputs_blob_type().data(), this->outputs_blob_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_GLOBAL_INIT_NET_TYPE;
        break;
      }

      // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
      case 6: {
        if (tag == 50) {
         parse_GLOBAL_INIT_NET_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_init_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->global_init_net_type().data(), this->global_init_net_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_PREDICT_INIT_NET_TYPE;
        break;
      }

      // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
      case 7: {
        if (tag == 58) {
         parse_PREDICT_INIT_NET_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_init_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predict_init_net_type().data(), this->predict_init_net_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_PREDICT_NET_TYPE;
        break;
      }

      // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
      case 8: {
        if (tag == 66) {
         parse_PREDICT_NET_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->predict_net_type().data(), this->predict_net_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.PREDICT_NET_TYPE");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_SINGLE_PREDICTOR;
        break;
      }

      // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
      case 9: {
        if (tag == 74) {
         parse_SINGLE_PREDICTOR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_single_predictor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->single_predictor().data(), this->single_predictor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.SINGLE_PREDICTOR");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_MULTI_PREDICTOR;
        break;
      }

      // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
      case 10: {
        if (tag == 82) {
         parse_MULTI_PREDICTOR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multi_predictor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->multi_predictor().data(), this->multi_predictor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.MULTI_PREDICTOR");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_TRAIN_INIT_PLAN_TYPE;
        break;
      }

      // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
      case 11: {
        if (tag == 90) {
         parse_TRAIN_INIT_PLAN_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_init_plan_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_init_plan_type().data(), this->train_init_plan_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_TRAIN_PLAN_TYPE;
        break;
      }

      // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
      case 12: {
        if (tag == 98) {
         parse_TRAIN_PLAN_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_plan_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->train_plan_type().data(), this->train_plan_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PredictorConsts)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PredictorConsts)
  return false;
#undef DO_
}

void PredictorConsts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PredictorConsts)
  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  if (has_meta_net_def()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta_net_def().data(), this->meta_net_def().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.META_NET_DEF");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->meta_net_def(), output);
  }

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  if (has_predictor_dbreader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predictor_dbreader().data(), this->predictor_dbreader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICTOR_DBREADER");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->predictor_dbreader(), output);
  }

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  if (has_parameters_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters_blob_type().data(), this->parameters_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->parameters_blob_type(), output);
  }

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  if (has_inputs_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inputs_blob_type().data(), this->inputs_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->inputs_blob_type(), output);
  }

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  if (has_outputs_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outputs_blob_type().data(), this->outputs_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->outputs_blob_type(), output);
  }

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  if (has_global_init_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_init_net_type().data(), this->global_init_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->global_init_net_type(), output);
  }

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  if (has_predict_init_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_init_net_type().data(), this->predict_init_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->predict_init_net_type(), output);
  }

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  if (has_predict_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_net_type().data(), this->predict_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_NET_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->predict_net_type(), output);
  }

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  if (has_single_predictor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_predictor().data(), this->single_predictor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.SINGLE_PREDICTOR");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->single_predictor(), output);
  }

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  if (has_multi_predictor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi_predictor().data(), this->multi_predictor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.MULTI_PREDICTOR");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->multi_predictor(), output);
  }

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  if (has_train_init_plan_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_init_plan_type().data(), this->train_init_plan_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->train_init_plan_type(), output);
  }

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  if (has_train_plan_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_plan_type().data(), this->train_plan_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->train_plan_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PredictorConsts)
}

::google::protobuf::uint8* PredictorConsts::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PredictorConsts)
  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  if (has_meta_net_def()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->meta_net_def().data(), this->meta_net_def().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.META_NET_DEF");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->meta_net_def(), target);
  }

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  if (has_predictor_dbreader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predictor_dbreader().data(), this->predictor_dbreader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICTOR_DBREADER");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->predictor_dbreader(), target);
  }

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  if (has_parameters_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters_blob_type().data(), this->parameters_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameters_blob_type(), target);
  }

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  if (has_inputs_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->inputs_blob_type().data(), this->inputs_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.INPUTS_BLOB_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inputs_blob_type(), target);
  }

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  if (has_outputs_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->outputs_blob_type().data(), this->outputs_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->outputs_blob_type(), target);
  }

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  if (has_global_init_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->global_init_net_type().data(), this->global_init_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->global_init_net_type(), target);
  }

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  if (has_predict_init_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_init_net_type().data(), this->predict_init_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->predict_init_net_type(), target);
  }

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  if (has_predict_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->predict_net_type().data(), this->predict_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.PREDICT_NET_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->predict_net_type(), target);
  }

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  if (has_single_predictor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->single_predictor().data(), this->single_predictor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.SINGLE_PREDICTOR");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->single_predictor(), target);
  }

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  if (has_multi_predictor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->multi_predictor().data(), this->multi_predictor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.MULTI_PREDICTOR");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->multi_predictor(), target);
  }

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  if (has_train_init_plan_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_init_plan_type().data(), this->train_init_plan_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->train_init_plan_type(), target);
  }

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  if (has_train_plan_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->train_plan_type().data(), this->train_plan_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.PredictorConsts.TRAIN_PLAN_TYPE");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->train_plan_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PredictorConsts)
  return target;
}

size_t PredictorConsts::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.PredictorConsts)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
    if (has_meta_net_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meta_net_def());
    }

    // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
    if (has_predictor_dbreader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predictor_dbreader());
    }

    // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
    if (has_parameters_blob_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameters_blob_type());
    }

    // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
    if (has_inputs_blob_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputs_blob_type());
    }

    // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
    if (has_outputs_blob_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outputs_blob_type());
    }

    // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
    if (has_global_init_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->global_init_net_type());
    }

    // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
    if (has_predict_init_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_init_net_type());
    }

    // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
    if (has_predict_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_net_type());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
    if (has_single_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->single_predictor());
    }

    // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
    if (has_multi_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multi_predictor());
    }

    // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
    if (has_train_init_plan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_init_plan_type());
    }

    // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
    if (has_train_plan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_plan_type());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictorConsts::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.PredictorConsts)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PredictorConsts* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PredictorConsts>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.PredictorConsts)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.PredictorConsts)
    UnsafeMergeFrom(*source);
  }
}

void PredictorConsts::MergeFrom(const PredictorConsts& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.PredictorConsts)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PredictorConsts::UnsafeMergeFrom(const PredictorConsts& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meta_net_def()) {
      set_has_meta_net_def();
      meta_net_def_.AssignWithDefault(_default_meta_net_def_, from.meta_net_def_);
    }
    if (from.has_predictor_dbreader()) {
      set_has_predictor_dbreader();
      predictor_dbreader_.AssignWithDefault(_default_predictor_dbreader_, from.predictor_dbreader_);
    }
    if (from.has_parameters_blob_type()) {
      set_has_parameters_blob_type();
      parameters_blob_type_.AssignWithDefault(_default_parameters_blob_type_, from.parameters_blob_type_);
    }
    if (from.has_inputs_blob_type()) {
      set_has_inputs_blob_type();
      inputs_blob_type_.AssignWithDefault(_default_inputs_blob_type_, from.inputs_blob_type_);
    }
    if (from.has_outputs_blob_type()) {
      set_has_outputs_blob_type();
      outputs_blob_type_.AssignWithDefault(_default_outputs_blob_type_, from.outputs_blob_type_);
    }
    if (from.has_global_init_net_type()) {
      set_has_global_init_net_type();
      global_init_net_type_.AssignWithDefault(_default_global_init_net_type_, from.global_init_net_type_);
    }
    if (from.has_predict_init_net_type()) {
      set_has_predict_init_net_type();
      predict_init_net_type_.AssignWithDefault(_default_predict_init_net_type_, from.predict_init_net_type_);
    }
    if (from.has_predict_net_type()) {
      set_has_predict_net_type();
      predict_net_type_.AssignWithDefault(_default_predict_net_type_, from.predict_net_type_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_single_predictor()) {
      set_has_single_predictor();
      single_predictor_.AssignWithDefault(_default_single_predictor_, from.single_predictor_);
    }
    if (from.has_multi_predictor()) {
      set_has_multi_predictor();
      multi_predictor_.AssignWithDefault(_default_multi_predictor_, from.multi_predictor_);
    }
    if (from.has_train_init_plan_type()) {
      set_has_train_init_plan_type();
      train_init_plan_type_.AssignWithDefault(_default_train_init_plan_type_, from.train_init_plan_type_);
    }
    if (from.has_train_plan_type()) {
      set_has_train_plan_type();
      train_plan_type_.AssignWithDefault(_default_train_plan_type_, from.train_plan_type_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PredictorConsts::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.PredictorConsts)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorConsts::CopyFrom(const PredictorConsts& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.PredictorConsts)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PredictorConsts::IsInitialized() const {

  return true;
}

void PredictorConsts::Swap(PredictorConsts* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PredictorConsts::InternalSwap(PredictorConsts* other) {
  meta_net_def_.Swap(&other->meta_net_def_);
  predictor_dbreader_.Swap(&other->predictor_dbreader_);
  parameters_blob_type_.Swap(&other->parameters_blob_type_);
  inputs_blob_type_.Swap(&other->inputs_blob_type_);
  outputs_blob_type_.Swap(&other->outputs_blob_type_);
  global_init_net_type_.Swap(&other->global_init_net_type_);
  predict_init_net_type_.Swap(&other->predict_init_net_type_);
  predict_net_type_.Swap(&other->predict_net_type_);
  single_predictor_.Swap(&other->single_predictor_);
  multi_predictor_.Swap(&other->multi_predictor_);
  train_init_plan_type_.Swap(&other->train_init_plan_type_);
  train_plan_type_.Swap(&other->train_plan_type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PredictorConsts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredictorConsts_descriptor_;
  metadata.reflection = PredictorConsts_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PredictorConsts

// optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
bool PredictorConsts::has_meta_net_def() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PredictorConsts::set_has_meta_net_def() {
  _has_bits_[0] |= 0x00000001u;
}
void PredictorConsts::clear_has_meta_net_def() {
  _has_bits_[0] &= ~0x00000001u;
}
void PredictorConsts::clear_meta_net_def() {
  meta_net_def_.ClearToDefaultNoArena(_default_meta_net_def_);
  clear_has_meta_net_def();
}
const ::std::string& PredictorConsts::meta_net_def() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.META_NET_DEF)
  return meta_net_def_.GetNoArena(_default_meta_net_def_);
}
void PredictorConsts::set_meta_net_def(const ::std::string& value) {
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(_default_meta_net_def_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.META_NET_DEF)
}
void PredictorConsts::set_meta_net_def(const char* value) {
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(_default_meta_net_def_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.META_NET_DEF)
}
void PredictorConsts::set_meta_net_def(const char* value, size_t size) {
  set_has_meta_net_def();
  meta_net_def_.SetNoArena(_default_meta_net_def_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.META_NET_DEF)
}
::std::string* PredictorConsts::mutable_meta_net_def() {
  set_has_meta_net_def();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.META_NET_DEF)
  return meta_net_def_.MutableNoArena(_default_meta_net_def_);
}
::std::string* PredictorConsts::release_meta_net_def() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.META_NET_DEF)
  clear_has_meta_net_def();
  return meta_net_def_.ReleaseNoArena(_default_meta_net_def_);
}
void PredictorConsts::set_allocated_meta_net_def(::std::string* meta_net_def) {
  if (meta_net_def != NULL) {
    set_has_meta_net_def();
  } else {
    clear_has_meta_net_def();
  }
  meta_net_def_.SetAllocatedNoArena(_default_meta_net_def_, meta_net_def);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.META_NET_DEF)
}

// optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
bool PredictorConsts::has_predictor_dbreader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PredictorConsts::set_has_predictor_dbreader() {
  _has_bits_[0] |= 0x00000002u;
}
void PredictorConsts::clear_has_predictor_dbreader() {
  _has_bits_[0] &= ~0x00000002u;
}
void PredictorConsts::clear_predictor_dbreader() {
  predictor_dbreader_.ClearToDefaultNoArena(_default_predictor_dbreader_);
  clear_has_predictor_dbreader();
}
const ::std::string& PredictorConsts::predictor_dbreader() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return predictor_dbreader_.GetNoArena(_default_predictor_dbreader_);
}
void PredictorConsts::set_predictor_dbreader(const ::std::string& value) {
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(_default_predictor_dbreader_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
void PredictorConsts::set_predictor_dbreader(const char* value) {
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(_default_predictor_dbreader_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
void PredictorConsts::set_predictor_dbreader(const char* value, size_t size) {
  set_has_predictor_dbreader();
  predictor_dbreader_.SetNoArena(_default_predictor_dbreader_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}
::std::string* PredictorConsts::mutable_predictor_dbreader() {
  set_has_predictor_dbreader();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  return predictor_dbreader_.MutableNoArena(_default_predictor_dbreader_);
}
::std::string* PredictorConsts::release_predictor_dbreader() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICTOR_DBREADER)
  clear_has_predictor_dbreader();
  return predictor_dbreader_.ReleaseNoArena(_default_predictor_dbreader_);
}
void PredictorConsts::set_allocated_predictor_dbreader(::std::string* predictor_dbreader) {
  if (predictor_dbreader != NULL) {
    set_has_predictor_dbreader();
  } else {
    clear_has_predictor_dbreader();
  }
  predictor_dbreader_.SetAllocatedNoArena(_default_predictor_dbreader_, predictor_dbreader);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICTOR_DBREADER)
}

// optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
bool PredictorConsts::has_parameters_blob_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PredictorConsts::set_has_parameters_blob_type() {
  _has_bits_[0] |= 0x00000004u;
}
void PredictorConsts::clear_has_parameters_blob_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void PredictorConsts::clear_parameters_blob_type() {
  parameters_blob_type_.ClearToDefaultNoArena(_default_parameters_blob_type_);
  clear_has_parameters_blob_type();
}
const ::std::string& PredictorConsts::parameters_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return parameters_blob_type_.GetNoArena(_default_parameters_blob_type_);
}
void PredictorConsts::set_parameters_blob_type(const ::std::string& value) {
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(_default_parameters_blob_type_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
void PredictorConsts::set_parameters_blob_type(const char* value) {
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(_default_parameters_blob_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
void PredictorConsts::set_parameters_blob_type(const char* value, size_t size) {
  set_has_parameters_blob_type();
  parameters_blob_type_.SetNoArena(_default_parameters_blob_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}
::std::string* PredictorConsts::mutable_parameters_blob_type() {
  set_has_parameters_blob_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  return parameters_blob_type_.MutableNoArena(_default_parameters_blob_type_);
}
::std::string* PredictorConsts::release_parameters_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
  clear_has_parameters_blob_type();
  return parameters_blob_type_.ReleaseNoArena(_default_parameters_blob_type_);
}
void PredictorConsts::set_allocated_parameters_blob_type(::std::string* parameters_blob_type) {
  if (parameters_blob_type != NULL) {
    set_has_parameters_blob_type();
  } else {
    clear_has_parameters_blob_type();
  }
  parameters_blob_type_.SetAllocatedNoArena(_default_parameters_blob_type_, parameters_blob_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PARAMETERS_BLOB_TYPE)
}

// optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
bool PredictorConsts::has_inputs_blob_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PredictorConsts::set_has_inputs_blob_type() {
  _has_bits_[0] |= 0x00000008u;
}
void PredictorConsts::clear_has_inputs_blob_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void PredictorConsts::clear_inputs_blob_type() {
  inputs_blob_type_.ClearToDefaultNoArena(_default_inputs_blob_type_);
  clear_has_inputs_blob_type();
}
const ::std::string& PredictorConsts::inputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return inputs_blob_type_.GetNoArena(_default_inputs_blob_type_);
}
void PredictorConsts::set_inputs_blob_type(const ::std::string& value) {
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(_default_inputs_blob_type_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
void PredictorConsts::set_inputs_blob_type(const char* value) {
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(_default_inputs_blob_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
void PredictorConsts::set_inputs_blob_type(const char* value, size_t size) {
  set_has_inputs_blob_type();
  inputs_blob_type_.SetNoArena(_default_inputs_blob_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}
::std::string* PredictorConsts::mutable_inputs_blob_type() {
  set_has_inputs_blob_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  return inputs_blob_type_.MutableNoArena(_default_inputs_blob_type_);
}
::std::string* PredictorConsts::release_inputs_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
  clear_has_inputs_blob_type();
  return inputs_blob_type_.ReleaseNoArena(_default_inputs_blob_type_);
}
void PredictorConsts::set_allocated_inputs_blob_type(::std::string* inputs_blob_type) {
  if (inputs_blob_type != NULL) {
    set_has_inputs_blob_type();
  } else {
    clear_has_inputs_blob_type();
  }
  inputs_blob_type_.SetAllocatedNoArena(_default_inputs_blob_type_, inputs_blob_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.INPUTS_BLOB_TYPE)
}

// optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
bool PredictorConsts::has_outputs_blob_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PredictorConsts::set_has_outputs_blob_type() {
  _has_bits_[0] |= 0x00000010u;
}
void PredictorConsts::clear_has_outputs_blob_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void PredictorConsts::clear_outputs_blob_type() {
  outputs_blob_type_.ClearToDefaultNoArena(_default_outputs_blob_type_);
  clear_has_outputs_blob_type();
}
const ::std::string& PredictorConsts::outputs_blob_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return outputs_blob_type_.GetNoArena(_default_outputs_blob_type_);
}
void PredictorConsts::set_outputs_blob_type(const ::std::string& value) {
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(_default_outputs_blob_type_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
void PredictorConsts::set_outputs_blob_type(const char* value) {
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(_default_outputs_blob_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
void PredictorConsts::set_outputs_blob_type(const char* value, size_t size) {
  set_has_outputs_blob_type();
  outputs_blob_type_.SetNoArena(_default_outputs_blob_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}
::std::string* PredictorConsts::mutable_outputs_blob_type() {
  set_has_outputs_blob_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  return outputs_blob_type_.MutableNoArena(_default_outputs_blob_type_);
}
::std::string* PredictorConsts::release_outputs_blob_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
  clear_has_outputs_blob_type();
  return outputs_blob_type_.ReleaseNoArena(_default_outputs_blob_type_);
}
void PredictorConsts::set_allocated_outputs_blob_type(::std::string* outputs_blob_type) {
  if (outputs_blob_type != NULL) {
    set_has_outputs_blob_type();
  } else {
    clear_has_outputs_blob_type();
  }
  outputs_blob_type_.SetAllocatedNoArena(_default_outputs_blob_type_, outputs_blob_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.OUTPUTS_BLOB_TYPE)
}

// optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
bool PredictorConsts::has_global_init_net_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PredictorConsts::set_has_global_init_net_type() {
  _has_bits_[0] |= 0x00000020u;
}
void PredictorConsts::clear_has_global_init_net_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void PredictorConsts::clear_global_init_net_type() {
  global_init_net_type_.ClearToDefaultNoArena(_default_global_init_net_type_);
  clear_has_global_init_net_type();
}
const ::std::string& PredictorConsts::global_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return global_init_net_type_.GetNoArena(_default_global_init_net_type_);
}
void PredictorConsts::set_global_init_net_type(const ::std::string& value) {
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(_default_global_init_net_type_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
void PredictorConsts::set_global_init_net_type(const char* value) {
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(_default_global_init_net_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
void PredictorConsts::set_global_init_net_type(const char* value, size_t size) {
  set_has_global_init_net_type();
  global_init_net_type_.SetNoArena(_default_global_init_net_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}
::std::string* PredictorConsts::mutable_global_init_net_type() {
  set_has_global_init_net_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  return global_init_net_type_.MutableNoArena(_default_global_init_net_type_);
}
::std::string* PredictorConsts::release_global_init_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
  clear_has_global_init_net_type();
  return global_init_net_type_.ReleaseNoArena(_default_global_init_net_type_);
}
void PredictorConsts::set_allocated_global_init_net_type(::std::string* global_init_net_type) {
  if (global_init_net_type != NULL) {
    set_has_global_init_net_type();
  } else {
    clear_has_global_init_net_type();
  }
  global_init_net_type_.SetAllocatedNoArena(_default_global_init_net_type_, global_init_net_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.GLOBAL_INIT_NET_TYPE)
}

// optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
bool PredictorConsts::has_predict_init_net_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PredictorConsts::set_has_predict_init_net_type() {
  _has_bits_[0] |= 0x00000040u;
}
void PredictorConsts::clear_has_predict_init_net_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void PredictorConsts::clear_predict_init_net_type() {
  predict_init_net_type_.ClearToDefaultNoArena(_default_predict_init_net_type_);
  clear_has_predict_init_net_type();
}
const ::std::string& PredictorConsts::predict_init_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return predict_init_net_type_.GetNoArena(_default_predict_init_net_type_);
}
void PredictorConsts::set_predict_init_net_type(const ::std::string& value) {
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(_default_predict_init_net_type_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
void PredictorConsts::set_predict_init_net_type(const char* value) {
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(_default_predict_init_net_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
void PredictorConsts::set_predict_init_net_type(const char* value, size_t size) {
  set_has_predict_init_net_type();
  predict_init_net_type_.SetNoArena(_default_predict_init_net_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}
::std::string* PredictorConsts::mutable_predict_init_net_type() {
  set_has_predict_init_net_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  return predict_init_net_type_.MutableNoArena(_default_predict_init_net_type_);
}
::std::string* PredictorConsts::release_predict_init_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
  clear_has_predict_init_net_type();
  return predict_init_net_type_.ReleaseNoArena(_default_predict_init_net_type_);
}
void PredictorConsts::set_allocated_predict_init_net_type(::std::string* predict_init_net_type) {
  if (predict_init_net_type != NULL) {
    set_has_predict_init_net_type();
  } else {
    clear_has_predict_init_net_type();
  }
  predict_init_net_type_.SetAllocatedNoArena(_default_predict_init_net_type_, predict_init_net_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_INIT_NET_TYPE)
}

// optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
bool PredictorConsts::has_predict_net_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PredictorConsts::set_has_predict_net_type() {
  _has_bits_[0] |= 0x00000080u;
}
void PredictorConsts::clear_has_predict_net_type() {
  _has_bits_[0] &= ~0x00000080u;
}
void PredictorConsts::clear_predict_net_type() {
  predict_net_type_.ClearToDefaultNoArena(_default_predict_net_type_);
  clear_has_predict_net_type();
}
const ::std::string& PredictorConsts::predict_net_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return predict_net_type_.GetNoArena(_default_predict_net_type_);
}
void PredictorConsts::set_predict_net_type(const ::std::string& value) {
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(_default_predict_net_type_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
void PredictorConsts::set_predict_net_type(const char* value) {
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(_default_predict_net_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
void PredictorConsts::set_predict_net_type(const char* value, size_t size) {
  set_has_predict_net_type();
  predict_net_type_.SetNoArena(_default_predict_net_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}
::std::string* PredictorConsts::mutable_predict_net_type() {
  set_has_predict_net_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  return predict_net_type_.MutableNoArena(_default_predict_net_type_);
}
::std::string* PredictorConsts::release_predict_net_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.PREDICT_NET_TYPE)
  clear_has_predict_net_type();
  return predict_net_type_.ReleaseNoArena(_default_predict_net_type_);
}
void PredictorConsts::set_allocated_predict_net_type(::std::string* predict_net_type) {
  if (predict_net_type != NULL) {
    set_has_predict_net_type();
  } else {
    clear_has_predict_net_type();
  }
  predict_net_type_.SetAllocatedNoArena(_default_predict_net_type_, predict_net_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.PREDICT_NET_TYPE)
}

// optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
bool PredictorConsts::has_single_predictor() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PredictorConsts::set_has_single_predictor() {
  _has_bits_[0] |= 0x00000100u;
}
void PredictorConsts::clear_has_single_predictor() {
  _has_bits_[0] &= ~0x00000100u;
}
void PredictorConsts::clear_single_predictor() {
  single_predictor_.ClearToDefaultNoArena(_default_single_predictor_);
  clear_has_single_predictor();
}
const ::std::string& PredictorConsts::single_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return single_predictor_.GetNoArena(_default_single_predictor_);
}
void PredictorConsts::set_single_predictor(const ::std::string& value) {
  set_has_single_predictor();
  single_predictor_.SetNoArena(_default_single_predictor_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
void PredictorConsts::set_single_predictor(const char* value) {
  set_has_single_predictor();
  single_predictor_.SetNoArena(_default_single_predictor_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
void PredictorConsts::set_single_predictor(const char* value, size_t size) {
  set_has_single_predictor();
  single_predictor_.SetNoArena(_default_single_predictor_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}
::std::string* PredictorConsts::mutable_single_predictor() {
  set_has_single_predictor();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  return single_predictor_.MutableNoArena(_default_single_predictor_);
}
::std::string* PredictorConsts::release_single_predictor() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.SINGLE_PREDICTOR)
  clear_has_single_predictor();
  return single_predictor_.ReleaseNoArena(_default_single_predictor_);
}
void PredictorConsts::set_allocated_single_predictor(::std::string* single_predictor) {
  if (single_predictor != NULL) {
    set_has_single_predictor();
  } else {
    clear_has_single_predictor();
  }
  single_predictor_.SetAllocatedNoArena(_default_single_predictor_, single_predictor);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.SINGLE_PREDICTOR)
}

// optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
bool PredictorConsts::has_multi_predictor() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PredictorConsts::set_has_multi_predictor() {
  _has_bits_[0] |= 0x00000200u;
}
void PredictorConsts::clear_has_multi_predictor() {
  _has_bits_[0] &= ~0x00000200u;
}
void PredictorConsts::clear_multi_predictor() {
  multi_predictor_.ClearToDefaultNoArena(_default_multi_predictor_);
  clear_has_multi_predictor();
}
const ::std::string& PredictorConsts::multi_predictor() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return multi_predictor_.GetNoArena(_default_multi_predictor_);
}
void PredictorConsts::set_multi_predictor(const ::std::string& value) {
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(_default_multi_predictor_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
void PredictorConsts::set_multi_predictor(const char* value) {
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(_default_multi_predictor_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
void PredictorConsts::set_multi_predictor(const char* value, size_t size) {
  set_has_multi_predictor();
  multi_predictor_.SetNoArena(_default_multi_predictor_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.MULTI_PREDICTOR)
}
::std::string* PredictorConsts::mutable_multi_predictor() {
  set_has_multi_predictor();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.MULTI_PREDICTOR)
  return multi_predictor_.MutableNoArena(_default_multi_predictor_);
}
::std::string* PredictorConsts::release_multi_predictor() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.MULTI_PREDICTOR)
  clear_has_multi_predictor();
  return multi_predictor_.ReleaseNoArena(_default_multi_predictor_);
}
void PredictorConsts::set_allocated_multi_predictor(::std::string* multi_predictor) {
  if (multi_predictor != NULL) {
    set_has_multi_predictor();
  } else {
    clear_has_multi_predictor();
  }
  multi_predictor_.SetAllocatedNoArena(_default_multi_predictor_, multi_predictor);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.MULTI_PREDICTOR)
}

// optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
bool PredictorConsts::has_train_init_plan_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PredictorConsts::set_has_train_init_plan_type() {
  _has_bits_[0] |= 0x00000400u;
}
void PredictorConsts::clear_has_train_init_plan_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void PredictorConsts::clear_train_init_plan_type() {
  train_init_plan_type_.ClearToDefaultNoArena(_default_train_init_plan_type_);
  clear_has_train_init_plan_type();
}
const ::std::string& PredictorConsts::train_init_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return train_init_plan_type_.GetNoArena(_default_train_init_plan_type_);
}
void PredictorConsts::set_train_init_plan_type(const ::std::string& value) {
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(_default_train_init_plan_type_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
void PredictorConsts::set_train_init_plan_type(const char* value) {
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(_default_train_init_plan_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
void PredictorConsts::set_train_init_plan_type(const char* value, size_t size) {
  set_has_train_init_plan_type();
  train_init_plan_type_.SetNoArena(_default_train_init_plan_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}
::std::string* PredictorConsts::mutable_train_init_plan_type() {
  set_has_train_init_plan_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  return train_init_plan_type_.MutableNoArena(_default_train_init_plan_type_);
}
::std::string* PredictorConsts::release_train_init_plan_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
  clear_has_train_init_plan_type();
  return train_init_plan_type_.ReleaseNoArena(_default_train_init_plan_type_);
}
void PredictorConsts::set_allocated_train_init_plan_type(::std::string* train_init_plan_type) {
  if (train_init_plan_type != NULL) {
    set_has_train_init_plan_type();
  } else {
    clear_has_train_init_plan_type();
  }
  train_init_plan_type_.SetAllocatedNoArena(_default_train_init_plan_type_, train_init_plan_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_INIT_PLAN_TYPE)
}

// optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
bool PredictorConsts::has_train_plan_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PredictorConsts::set_has_train_plan_type() {
  _has_bits_[0] |= 0x00000800u;
}
void PredictorConsts::clear_has_train_plan_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void PredictorConsts::clear_train_plan_type() {
  train_plan_type_.ClearToDefaultNoArena(_default_train_plan_type_);
  clear_has_train_plan_type();
}
const ::std::string& PredictorConsts::train_plan_type() const {
  // @@protoc_insertion_point(field_get:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return train_plan_type_.GetNoArena(_default_train_plan_type_);
}
void PredictorConsts::set_train_plan_type(const ::std::string& value) {
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(_default_train_plan_type_, value);
  // @@protoc_insertion_point(field_set:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
void PredictorConsts::set_train_plan_type(const char* value) {
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(_default_train_plan_type_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
void PredictorConsts::set_train_plan_type(const char* value, size_t size) {
  set_has_train_plan_type();
  train_plan_type_.SetNoArena(_default_train_plan_type_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}
::std::string* PredictorConsts::mutable_train_plan_type() {
  set_has_train_plan_type();
  // @@protoc_insertion_point(field_mutable:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  return train_plan_type_.MutableNoArena(_default_train_plan_type_);
}
::std::string* PredictorConsts::release_train_plan_type() {
  // @@protoc_insertion_point(field_release:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
  clear_has_train_plan_type();
  return train_plan_type_.ReleaseNoArena(_default_train_plan_type_);
}
void PredictorConsts::set_allocated_train_plan_type(::std::string* train_plan_type) {
  if (train_plan_type != NULL) {
    set_has_train_plan_type();
  } else {
    clear_has_train_plan_type();
  }
  train_plan_type_.SetAllocatedNoArena(_default_train_plan_type_, train_plan_type);
  // @@protoc_insertion_point(field_set_allocated:caffe2.PredictorConsts.TRAIN_PLAN_TYPE)
}

inline const PredictorConsts* PredictorConsts::internal_default_instance() {
  return &PredictorConsts_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
