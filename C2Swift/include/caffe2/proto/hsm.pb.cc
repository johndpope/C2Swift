// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2/proto/hsm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe2/proto/hsm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* NodeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HierarchyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HierarchyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathNodeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathNodeProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe2_2fproto_2fhsm_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_caffe2_2fproto_2fhsm_2eproto() {
  protobuf_AddDesc_caffe2_2fproto_2fhsm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe2/proto/hsm.proto");
  GOOGLE_CHECK(file != NULL);
  NodeProto_descriptor_ = file->message_type(0);
  static const int NodeProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, word_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, scores_),
  };
  NodeProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      NodeProto_descriptor_,
      NodeProto::internal_default_instance(),
      NodeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, _has_bits_),
      -1,
      -1,
      sizeof(NodeProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, _internal_metadata_));
  TreeProto_descriptor_ = file->message_type(1);
  static const int TreeProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, root_node_),
  };
  TreeProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TreeProto_descriptor_,
      TreeProto::internal_default_instance(),
      TreeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, _has_bits_),
      -1,
      -1,
      sizeof(TreeProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, _internal_metadata_));
  HierarchyProto_descriptor_ = file->message_type(2);
  static const int HierarchyProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyProto, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyProto, paths_),
  };
  HierarchyProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HierarchyProto_descriptor_,
      HierarchyProto::internal_default_instance(),
      HierarchyProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyProto, _has_bits_),
      -1,
      -1,
      sizeof(HierarchyProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyProto, _internal_metadata_));
  PathProto_descriptor_ = file->message_type(3);
  static const int PathProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathProto, word_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathProto, path_nodes_),
  };
  PathProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathProto_descriptor_,
      PathProto::internal_default_instance(),
      PathProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathProto, _has_bits_),
      -1,
      -1,
      sizeof(PathProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathProto, _internal_metadata_));
  PathNodeProto_descriptor_ = file->message_type(4);
  static const int PathNodeProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, target_),
  };
  PathNodeProto_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      PathNodeProto_descriptor_,
      PathNodeProto::internal_default_instance(),
      PathNodeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, _has_bits_),
      -1,
      -1,
      sizeof(PathNodeProto),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe2_2fproto_2fhsm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      NodeProto_descriptor_, NodeProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TreeProto_descriptor_, TreeProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HierarchyProto_descriptor_, HierarchyProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathProto_descriptor_, PathProto::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      PathNodeProto_descriptor_, PathNodeProto::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe2_2fproto_2fhsm_2eproto() {
  NodeProto_default_instance_.Shutdown();
  delete NodeProto_reflection_;
  TreeProto_default_instance_.Shutdown();
  delete TreeProto_reflection_;
  HierarchyProto_default_instance_.Shutdown();
  delete HierarchyProto_reflection_;
  PathProto_default_instance_.Shutdown();
  delete PathProto_reflection_;
  PathNodeProto_default_instance_.Shutdown();
  delete PathNodeProto_reflection_;
}

void protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  NodeProto_default_instance_.DefaultConstruct();
  TreeProto_default_instance_.DefaultConstruct();
  HierarchyProto_default_instance_.DefaultConstruct();
  PathProto_default_instance_.DefaultConstruct();
  PathNodeProto_default_instance_.DefaultConstruct();
  NodeProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  TreeProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  HierarchyProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  PathProto_default_instance_.get_mutable()->InitAsDefaultInstance();
  PathNodeProto_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto_once_);
void protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto_once_,
                 &protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto_impl);
}
void protobuf_AddDesc_caffe2_2fproto_2fhsm_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026caffe2/proto/hsm.proto\022\006caffe2\"p\n\tNode"
    "Proto\022#\n\010children\030\001 \003(\0132\021.caffe2.NodePro"
    "to\022\020\n\010word_ids\030\002 \003(\005\022\016\n\006offset\030\003 \001(\005\022\014\n\004"
    "name\030\004 \001(\t\022\016\n\006scores\030\005 \003(\002\"1\n\tTreeProto\022"
    "$\n\troot_node\030\001 \001(\0132\021.caffe2.NodeProto\"@\n"
    "\016HierarchyProto\022\014\n\004size\030\001 \001(\005\022 \n\005paths\030\002"
    " \003(\0132\021.caffe2.PathProto\"G\n\tPathProto\022\017\n\007"
    "word_id\030\001 \001(\005\022)\n\npath_nodes\030\002 \003(\0132\025.caff"
    "e2.PathNodeProto\">\n\rPathNodeProto\022\r\n\005ind"
    "ex\030\001 \001(\005\022\016\n\006length\030\002 \001(\005\022\016\n\006target\030\003 \001(\005", 400);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe2/proto/hsm.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe2_2fproto_2fhsm_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_caffe2_2fproto_2fhsm_2eproto_once_);
void protobuf_AddDesc_caffe2_2fproto_2fhsm_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_caffe2_2fproto_2fhsm_2eproto_once_,
                 &protobuf_AddDesc_caffe2_2fproto_2fhsm_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe2_2fproto_2fhsm_2eproto {
  StaticDescriptorInitializer_caffe2_2fproto_2fhsm_2eproto() {
    protobuf_AddDesc_caffe2_2fproto_2fhsm_2eproto();
  }
} static_descriptor_initializer_caffe2_2fproto_2fhsm_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeProto::kChildrenFieldNumber;
const int NodeProto::kWordIdsFieldNumber;
const int NodeProto::kOffsetFieldNumber;
const int NodeProto::kNameFieldNumber;
const int NodeProto::kScoresFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeProto::NodeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.NodeProto)
}

void NodeProto::InitAsDefaultInstance() {
}

NodeProto::NodeProto(const NodeProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.NodeProto)
}

void NodeProto::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  offset_ = 0;
}

NodeProto::~NodeProto() {
  // @@protoc_insertion_point(destructor:caffe2.NodeProto)
  SharedDtor();
}

void NodeProto::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeProto_descriptor_;
}

const NodeProto& NodeProto::default_instance() {
  protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<NodeProto> NodeProto_default_instance_;

NodeProto* NodeProto::New(::google::protobuf::Arena* arena) const {
  NodeProto* n = new NodeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.NodeProto)
  if (_has_bits_[0 / 32] & 12u) {
    offset_ = 0;
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  children_.Clear();
  word_ids_.Clear();
  scores_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool NodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.NodeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.NodeProto children = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_children;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_word_ids;
        break;
      }

      // repeated int32 word_ids = 2;
      case 2: {
        if (tag == 16) {
         parse_word_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_word_ids())));
        } else if (tag == 18) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_word_ids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_word_ids;
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional int32 offset = 3;
      case 3: {
        if (tag == 24) {
         parse_offset:
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (tag == 34) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "caffe2.NodeProto.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_scores;
        break;
      }

      // repeated float scores = 5;
      case 5: {
        if (tag == 45) {
         parse_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_scores())));
        } else if (tag == 42) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scores())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_scores;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.NodeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.NodeProto)
  return false;
#undef DO_
}

void NodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.NodeProto)
  // repeated .caffe2.NodeProto children = 1;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->children(i), output);
  }

  // repeated int32 word_ids = 2;
  for (int i = 0; i < this->word_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->word_ids(i), output);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NodeProto.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->name(), output);
  }

  // repeated float scores = 5;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->scores(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.NodeProto)
}

::google::protobuf::uint8* NodeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.NodeProto)
  // repeated .caffe2.NodeProto children = 1;
  for (unsigned int i = 0, n = this->children_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->children(i), false, target);
  }

  // repeated int32 word_ids = 2;
  for (int i = 0; i < this->word_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->word_ids(i), target);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "caffe2.NodeProto.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // repeated float scores = 5;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->scores(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.NodeProto)
  return target;
}

size_t NodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.NodeProto)
  size_t total_size = 0;

  if (_has_bits_[2 / 32] & 12u) {
    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .caffe2.NodeProto children = 1;
  {
    unsigned int count = this->children_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->children(i));
    }
  }

  // repeated int32 word_ids = 2;
  {
    size_t data_size = 0;
    unsigned int count = this->word_ids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->word_ids(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->word_ids_size());
    total_size += data_size;
  }

  // repeated float scores = 5;
  {
    size_t data_size = 0;
    unsigned int count = this->scores_size();
    data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->scores_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.NodeProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const NodeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.NodeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.NodeProto)
    UnsafeMergeFrom(*source);
  }
}

void NodeProto::MergeFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.NodeProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void NodeProto::UnsafeMergeFrom(const NodeProto& from) {
  GOOGLE_DCHECK(&from != this);
  children_.MergeFrom(from.children_);
  word_ids_.UnsafeMergeFrom(from.word_ids_);
  scores_.UnsafeMergeFrom(from.scores_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void NodeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.NodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeProto::CopyFrom(const NodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.NodeProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool NodeProto::IsInitialized() const {

  return true;
}

void NodeProto::Swap(NodeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeProto::InternalSwap(NodeProto* other) {
  children_.UnsafeArenaSwap(&other->children_);
  word_ids_.UnsafeArenaSwap(&other->word_ids_);
  std::swap(offset_, other->offset_);
  name_.Swap(&other->name_);
  scores_.UnsafeArenaSwap(&other->scores_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NodeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeProto_descriptor_;
  metadata.reflection = NodeProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NodeProto

// repeated .caffe2.NodeProto children = 1;
int NodeProto::children_size() const {
  return children_.size();
}
void NodeProto::clear_children() {
  children_.Clear();
}
const ::caffe2::NodeProto& NodeProto::children(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NodeProto.children)
  return children_.Get(index);
}
::caffe2::NodeProto* NodeProto::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.NodeProto.children)
  return children_.Mutable(index);
}
::caffe2::NodeProto* NodeProto::add_children() {
  // @@protoc_insertion_point(field_add:caffe2.NodeProto.children)
  return children_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::NodeProto >*
NodeProto::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NodeProto.children)
  return &children_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::NodeProto >&
NodeProto::children() const {
  // @@protoc_insertion_point(field_list:caffe2.NodeProto.children)
  return children_;
}

// repeated int32 word_ids = 2;
int NodeProto::word_ids_size() const {
  return word_ids_.size();
}
void NodeProto::clear_word_ids() {
  word_ids_.Clear();
}
::google::protobuf::int32 NodeProto::word_ids(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NodeProto.word_ids)
  return word_ids_.Get(index);
}
void NodeProto::set_word_ids(int index, ::google::protobuf::int32 value) {
  word_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.NodeProto.word_ids)
}
void NodeProto::add_word_ids(::google::protobuf::int32 value) {
  word_ids_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.NodeProto.word_ids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
NodeProto::word_ids() const {
  // @@protoc_insertion_point(field_list:caffe2.NodeProto.word_ids)
  return word_ids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
NodeProto::mutable_word_ids() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NodeProto.word_ids)
  return &word_ids_;
}

// optional int32 offset = 3;
bool NodeProto::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void NodeProto::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
void NodeProto::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
void NodeProto::clear_offset() {
  offset_ = 0;
  clear_has_offset();
}
::google::protobuf::int32 NodeProto::offset() const {
  // @@protoc_insertion_point(field_get:caffe2.NodeProto.offset)
  return offset_;
}
void NodeProto::set_offset(::google::protobuf::int32 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:caffe2.NodeProto.offset)
}

// optional string name = 4;
bool NodeProto::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void NodeProto::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
void NodeProto::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
void NodeProto::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
const ::std::string& NodeProto::name() const {
  // @@protoc_insertion_point(field_get:caffe2.NodeProto.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:caffe2.NodeProto.name)
}
void NodeProto::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:caffe2.NodeProto.name)
}
void NodeProto::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:caffe2.NodeProto.name)
}
::std::string* NodeProto::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:caffe2.NodeProto.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NodeProto::release_name() {
  // @@protoc_insertion_point(field_release:caffe2.NodeProto.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NodeProto::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:caffe2.NodeProto.name)
}

// repeated float scores = 5;
int NodeProto::scores_size() const {
  return scores_.size();
}
void NodeProto::clear_scores() {
  scores_.Clear();
}
float NodeProto::scores(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.NodeProto.scores)
  return scores_.Get(index);
}
void NodeProto::set_scores(int index, float value) {
  scores_.Set(index, value);
  // @@protoc_insertion_point(field_set:caffe2.NodeProto.scores)
}
void NodeProto::add_scores(float value) {
  scores_.Add(value);
  // @@protoc_insertion_point(field_add:caffe2.NodeProto.scores)
}
const ::google::protobuf::RepeatedField< float >&
NodeProto::scores() const {
  // @@protoc_insertion_point(field_list:caffe2.NodeProto.scores)
  return scores_;
}
::google::protobuf::RepeatedField< float >*
NodeProto::mutable_scores() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.NodeProto.scores)
  return &scores_;
}

inline const NodeProto* NodeProto::internal_default_instance() {
  return &NodeProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TreeProto::kRootNodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TreeProto::TreeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.TreeProto)
}

void TreeProto::InitAsDefaultInstance() {
  root_node_ = const_cast< ::caffe2::NodeProto*>(
      ::caffe2::NodeProto::internal_default_instance());
}

TreeProto::TreeProto(const TreeProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.TreeProto)
}

void TreeProto::SharedCtor() {
  _cached_size_ = 0;
  root_node_ = NULL;
}

TreeProto::~TreeProto() {
  // @@protoc_insertion_point(destructor:caffe2.TreeProto)
  SharedDtor();
}

void TreeProto::SharedDtor() {
  if (this != &TreeProto_default_instance_.get()) {
    delete root_node_;
  }
}

void TreeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeProto_descriptor_;
}

const TreeProto& TreeProto::default_instance() {
  protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TreeProto> TreeProto_default_instance_;

TreeProto* TreeProto::New(::google::protobuf::Arena* arena) const {
  TreeProto* n = new TreeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TreeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.TreeProto)
  if (has_root_node()) {
    if (root_node_ != NULL) root_node_->::caffe2::NodeProto::Clear();
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TreeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.TreeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe2.NodeProto root_node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.TreeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.TreeProto)
  return false;
#undef DO_
}

void TreeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.TreeProto)
  // optional .caffe2.NodeProto root_node = 1;
  if (has_root_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->root_node_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.TreeProto)
}

::google::protobuf::uint8* TreeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.TreeProto)
  // optional .caffe2.NodeProto root_node = 1;
  if (has_root_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->root_node_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.TreeProto)
  return target;
}

size_t TreeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.TreeProto)
  size_t total_size = 0;

  // optional .caffe2.NodeProto root_node = 1;
  if (has_root_node()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->root_node_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.TreeProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TreeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TreeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.TreeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.TreeProto)
    UnsafeMergeFrom(*source);
  }
}

void TreeProto::MergeFrom(const TreeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.TreeProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TreeProto::UnsafeMergeFrom(const TreeProto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_root_node()) {
      mutable_root_node()->::caffe2::NodeProto::MergeFrom(from.root_node());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TreeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.TreeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeProto::CopyFrom(const TreeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.TreeProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TreeProto::IsInitialized() const {

  return true;
}

void TreeProto::Swap(TreeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TreeProto::InternalSwap(TreeProto* other) {
  std::swap(root_node_, other->root_node_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TreeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeProto_descriptor_;
  metadata.reflection = TreeProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TreeProto

// optional .caffe2.NodeProto root_node = 1;
bool TreeProto::has_root_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TreeProto::set_has_root_node() {
  _has_bits_[0] |= 0x00000001u;
}
void TreeProto::clear_has_root_node() {
  _has_bits_[0] &= ~0x00000001u;
}
void TreeProto::clear_root_node() {
  if (root_node_ != NULL) root_node_->::caffe2::NodeProto::Clear();
  clear_has_root_node();
}
const ::caffe2::NodeProto& TreeProto::root_node() const {
  // @@protoc_insertion_point(field_get:caffe2.TreeProto.root_node)
  return root_node_ != NULL ? *root_node_
                         : *::caffe2::NodeProto::internal_default_instance();
}
::caffe2::NodeProto* TreeProto::mutable_root_node() {
  set_has_root_node();
  if (root_node_ == NULL) {
    root_node_ = new ::caffe2::NodeProto;
  }
  // @@protoc_insertion_point(field_mutable:caffe2.TreeProto.root_node)
  return root_node_;
}
::caffe2::NodeProto* TreeProto::release_root_node() {
  // @@protoc_insertion_point(field_release:caffe2.TreeProto.root_node)
  clear_has_root_node();
  ::caffe2::NodeProto* temp = root_node_;
  root_node_ = NULL;
  return temp;
}
void TreeProto::set_allocated_root_node(::caffe2::NodeProto* root_node) {
  delete root_node_;
  root_node_ = root_node;
  if (root_node) {
    set_has_root_node();
  } else {
    clear_has_root_node();
  }
  // @@protoc_insertion_point(field_set_allocated:caffe2.TreeProto.root_node)
}

inline const TreeProto* TreeProto::internal_default_instance() {
  return &TreeProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HierarchyProto::kSizeFieldNumber;
const int HierarchyProto::kPathsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HierarchyProto::HierarchyProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.HierarchyProto)
}

void HierarchyProto::InitAsDefaultInstance() {
}

HierarchyProto::HierarchyProto(const HierarchyProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.HierarchyProto)
}

void HierarchyProto::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
}

HierarchyProto::~HierarchyProto() {
  // @@protoc_insertion_point(destructor:caffe2.HierarchyProto)
  SharedDtor();
}

void HierarchyProto::SharedDtor() {
}

void HierarchyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HierarchyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HierarchyProto_descriptor_;
}

const HierarchyProto& HierarchyProto::default_instance() {
  protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HierarchyProto> HierarchyProto_default_instance_;

HierarchyProto* HierarchyProto::New(::google::protobuf::Arena* arena) const {
  HierarchyProto* n = new HierarchyProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HierarchyProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.HierarchyProto)
  size_ = 0;
  paths_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HierarchyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.HierarchyProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (tag == 8) {
          set_has_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_paths;
        break;
      }

      // repeated .caffe2.PathProto paths = 2;
      case 2: {
        if (tag == 18) {
         parse_paths:
          DO_(input->IncrementRecursionDepth());
         parse_loop_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_paths()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_paths;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.HierarchyProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.HierarchyProto)
  return false;
#undef DO_
}

void HierarchyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.HierarchyProto)
  // optional int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // repeated .caffe2.PathProto paths = 2;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paths(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.HierarchyProto)
}

::google::protobuf::uint8* HierarchyProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.HierarchyProto)
  // optional int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // repeated .caffe2.PathProto paths = 2;
  for (unsigned int i = 0, n = this->paths_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->paths(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.HierarchyProto)
  return target;
}

size_t HierarchyProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.HierarchyProto)
  size_t total_size = 0;

  // optional int32 size = 1;
  if (has_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // repeated .caffe2.PathProto paths = 2;
  {
    unsigned int count = this->paths_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->paths(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HierarchyProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.HierarchyProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HierarchyProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HierarchyProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.HierarchyProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.HierarchyProto)
    UnsafeMergeFrom(*source);
  }
}

void HierarchyProto::MergeFrom(const HierarchyProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.HierarchyProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HierarchyProto::UnsafeMergeFrom(const HierarchyProto& from) {
  GOOGLE_DCHECK(&from != this);
  paths_.MergeFrom(from.paths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void HierarchyProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.HierarchyProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HierarchyProto::CopyFrom(const HierarchyProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.HierarchyProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HierarchyProto::IsInitialized() const {

  return true;
}

void HierarchyProto::Swap(HierarchyProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HierarchyProto::InternalSwap(HierarchyProto* other) {
  std::swap(size_, other->size_);
  paths_.UnsafeArenaSwap(&other->paths_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HierarchyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HierarchyProto_descriptor_;
  metadata.reflection = HierarchyProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HierarchyProto

// optional int32 size = 1;
bool HierarchyProto::has_size() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HierarchyProto::set_has_size() {
  _has_bits_[0] |= 0x00000001u;
}
void HierarchyProto::clear_has_size() {
  _has_bits_[0] &= ~0x00000001u;
}
void HierarchyProto::clear_size() {
  size_ = 0;
  clear_has_size();
}
::google::protobuf::int32 HierarchyProto::size() const {
  // @@protoc_insertion_point(field_get:caffe2.HierarchyProto.size)
  return size_;
}
void HierarchyProto::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
  // @@protoc_insertion_point(field_set:caffe2.HierarchyProto.size)
}

// repeated .caffe2.PathProto paths = 2;
int HierarchyProto::paths_size() const {
  return paths_.size();
}
void HierarchyProto::clear_paths() {
  paths_.Clear();
}
const ::caffe2::PathProto& HierarchyProto::paths(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.HierarchyProto.paths)
  return paths_.Get(index);
}
::caffe2::PathProto* HierarchyProto::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.HierarchyProto.paths)
  return paths_.Mutable(index);
}
::caffe2::PathProto* HierarchyProto::add_paths() {
  // @@protoc_insertion_point(field_add:caffe2.HierarchyProto.paths)
  return paths_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::PathProto >*
HierarchyProto::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.HierarchyProto.paths)
  return &paths_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::PathProto >&
HierarchyProto::paths() const {
  // @@protoc_insertion_point(field_list:caffe2.HierarchyProto.paths)
  return paths_;
}

inline const HierarchyProto* HierarchyProto::internal_default_instance() {
  return &HierarchyProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathProto::kWordIdFieldNumber;
const int PathProto::kPathNodesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathProto::PathProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PathProto)
}

void PathProto::InitAsDefaultInstance() {
}

PathProto::PathProto(const PathProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.PathProto)
}

void PathProto::SharedCtor() {
  _cached_size_ = 0;
  word_id_ = 0;
}

PathProto::~PathProto() {
  // @@protoc_insertion_point(destructor:caffe2.PathProto)
  SharedDtor();
}

void PathProto::SharedDtor() {
}

void PathProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathProto_descriptor_;
}

const PathProto& PathProto::default_instance() {
  protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PathProto> PathProto_default_instance_;

PathProto* PathProto::New(::google::protobuf::Arena* arena) const {
  PathProto* n = new PathProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.PathProto)
  word_id_ = 0;
  path_nodes_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PathProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 word_id = 1;
      case 1: {
        if (tag == 8) {
          set_has_word_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_path_nodes;
        break;
      }

      // repeated .caffe2.PathNodeProto path_nodes = 2;
      case 2: {
        if (tag == 18) {
         parse_path_nodes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_path_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_path_nodes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loop_path_nodes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PathProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PathProto)
  return false;
#undef DO_
}

void PathProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PathProto)
  // optional int32 word_id = 1;
  if (has_word_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->word_id(), output);
  }

  // repeated .caffe2.PathNodeProto path_nodes = 2;
  for (unsigned int i = 0, n = this->path_nodes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path_nodes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PathProto)
}

::google::protobuf::uint8* PathProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PathProto)
  // optional int32 word_id = 1;
  if (has_word_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->word_id(), target);
  }

  // repeated .caffe2.PathNodeProto path_nodes = 2;
  for (unsigned int i = 0, n = this->path_nodes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->path_nodes(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PathProto)
  return target;
}

size_t PathProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.PathProto)
  size_t total_size = 0;

  // optional int32 word_id = 1;
  if (has_word_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->word_id());
  }

  // repeated .caffe2.PathNodeProto path_nodes = 2;
  {
    unsigned int count = this->path_nodes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path_nodes(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.PathProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PathProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.PathProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.PathProto)
    UnsafeMergeFrom(*source);
  }
}

void PathProto::MergeFrom(const PathProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.PathProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PathProto::UnsafeMergeFrom(const PathProto& from) {
  GOOGLE_DCHECK(&from != this);
  path_nodes_.MergeFrom(from.path_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word_id()) {
      set_word_id(from.word_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PathProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.PathProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathProto::CopyFrom(const PathProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.PathProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PathProto::IsInitialized() const {

  return true;
}

void PathProto::Swap(PathProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathProto::InternalSwap(PathProto* other) {
  std::swap(word_id_, other->word_id_);
  path_nodes_.UnsafeArenaSwap(&other->path_nodes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathProto_descriptor_;
  metadata.reflection = PathProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathProto

// optional int32 word_id = 1;
bool PathProto::has_word_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathProto::set_has_word_id() {
  _has_bits_[0] |= 0x00000001u;
}
void PathProto::clear_has_word_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathProto::clear_word_id() {
  word_id_ = 0;
  clear_has_word_id();
}
::google::protobuf::int32 PathProto::word_id() const {
  // @@protoc_insertion_point(field_get:caffe2.PathProto.word_id)
  return word_id_;
}
void PathProto::set_word_id(::google::protobuf::int32 value) {
  set_has_word_id();
  word_id_ = value;
  // @@protoc_insertion_point(field_set:caffe2.PathProto.word_id)
}

// repeated .caffe2.PathNodeProto path_nodes = 2;
int PathProto::path_nodes_size() const {
  return path_nodes_.size();
}
void PathProto::clear_path_nodes() {
  path_nodes_.Clear();
}
const ::caffe2::PathNodeProto& PathProto::path_nodes(int index) const {
  // @@protoc_insertion_point(field_get:caffe2.PathProto.path_nodes)
  return path_nodes_.Get(index);
}
::caffe2::PathNodeProto* PathProto::mutable_path_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:caffe2.PathProto.path_nodes)
  return path_nodes_.Mutable(index);
}
::caffe2::PathNodeProto* PathProto::add_path_nodes() {
  // @@protoc_insertion_point(field_add:caffe2.PathProto.path_nodes)
  return path_nodes_.Add();
}
::google::protobuf::RepeatedPtrField< ::caffe2::PathNodeProto >*
PathProto::mutable_path_nodes() {
  // @@protoc_insertion_point(field_mutable_list:caffe2.PathProto.path_nodes)
  return &path_nodes_;
}
const ::google::protobuf::RepeatedPtrField< ::caffe2::PathNodeProto >&
PathProto::path_nodes() const {
  // @@protoc_insertion_point(field_list:caffe2.PathProto.path_nodes)
  return path_nodes_;
}

inline const PathProto* PathProto::internal_default_instance() {
  return &PathProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PathNodeProto::kIndexFieldNumber;
const int PathNodeProto::kLengthFieldNumber;
const int PathNodeProto::kTargetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PathNodeProto::PathNodeProto()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:caffe2.PathNodeProto)
}

void PathNodeProto::InitAsDefaultInstance() {
}

PathNodeProto::PathNodeProto(const PathNodeProto& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:caffe2.PathNodeProto)
}

void PathNodeProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&index_, 0, reinterpret_cast<char*>(&target_) -
    reinterpret_cast<char*>(&index_) + sizeof(target_));
}

PathNodeProto::~PathNodeProto() {
  // @@protoc_insertion_point(destructor:caffe2.PathNodeProto)
  SharedDtor();
}

void PathNodeProto::SharedDtor() {
}

void PathNodeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathNodeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathNodeProto_descriptor_;
}

const PathNodeProto& PathNodeProto::default_instance() {
  protobuf_InitDefaults_caffe2_2fproto_2fhsm_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<PathNodeProto> PathNodeProto_default_instance_;

PathNodeProto* PathNodeProto::New(::google::protobuf::Arena* arena) const {
  PathNodeProto* n = new PathNodeProto;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PathNodeProto::Clear() {
// @@protoc_insertion_point(message_clear_start:caffe2.PathNodeProto)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(PathNodeProto, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<PathNodeProto*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(index_, target_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool PathNodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:caffe2.PathNodeProto)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (tag == 8) {
          set_has_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_target;
        break;
      }

      // optional int32 target = 3;
      case 3: {
        if (tag == 24) {
         parse_target:
          set_has_target();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:caffe2.PathNodeProto)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:caffe2.PathNodeProto)
  return false;
#undef DO_
}

void PathNodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:caffe2.PathNodeProto)
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // optional int32 target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:caffe2.PathNodeProto)
}

::google::protobuf::uint8* PathNodeProto::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:caffe2.PathNodeProto)
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // optional int32 target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:caffe2.PathNodeProto)
  return target;
}

size_t PathNodeProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:caffe2.PathNodeProto)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional int32 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathNodeProto::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:caffe2.PathNodeProto)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const PathNodeProto* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PathNodeProto>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:caffe2.PathNodeProto)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:caffe2.PathNodeProto)
    UnsafeMergeFrom(*source);
  }
}

void PathNodeProto::MergeFrom(const PathNodeProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:caffe2.PathNodeProto)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void PathNodeProto::UnsafeMergeFrom(const PathNodeProto& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void PathNodeProto::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:caffe2.PathNodeProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathNodeProto::CopyFrom(const PathNodeProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:caffe2.PathNodeProto)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool PathNodeProto::IsInitialized() const {

  return true;
}

void PathNodeProto::Swap(PathNodeProto* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PathNodeProto::InternalSwap(PathNodeProto* other) {
  std::swap(index_, other->index_);
  std::swap(length_, other->length_);
  std::swap(target_, other->target_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PathNodeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathNodeProto_descriptor_;
  metadata.reflection = PathNodeProto_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PathNodeProto

// optional int32 index = 1;
bool PathNodeProto::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PathNodeProto::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void PathNodeProto::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void PathNodeProto::clear_index() {
  index_ = 0;
  clear_has_index();
}
::google::protobuf::int32 PathNodeProto::index() const {
  // @@protoc_insertion_point(field_get:caffe2.PathNodeProto.index)
  return index_;
}
void PathNodeProto::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:caffe2.PathNodeProto.index)
}

// optional int32 length = 2;
bool PathNodeProto::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PathNodeProto::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
void PathNodeProto::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
void PathNodeProto::clear_length() {
  length_ = 0;
  clear_has_length();
}
::google::protobuf::int32 PathNodeProto::length() const {
  // @@protoc_insertion_point(field_get:caffe2.PathNodeProto.length)
  return length_;
}
void PathNodeProto::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:caffe2.PathNodeProto.length)
}

// optional int32 target = 3;
bool PathNodeProto::has_target() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PathNodeProto::set_has_target() {
  _has_bits_[0] |= 0x00000004u;
}
void PathNodeProto::clear_has_target() {
  _has_bits_[0] &= ~0x00000004u;
}
void PathNodeProto::clear_target() {
  target_ = 0;
  clear_has_target();
}
::google::protobuf::int32 PathNodeProto::target() const {
  // @@protoc_insertion_point(field_get:caffe2.PathNodeProto.target)
  return target_;
}
void PathNodeProto::set_target(::google::protobuf::int32 value) {
  set_has_target();
  target_ = value;
  // @@protoc_insertion_point(field_set:caffe2.PathNodeProto.target)
}

inline const PathNodeProto* PathNodeProto::internal_default_instance() {
  return &PathNodeProto_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
